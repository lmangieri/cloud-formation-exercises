AWSTemplateFormatVersion: '2010-09-09'
Description: Infraestrutura ECS teste

Parameters:
    ServiceName:
        Description: Nome do Servi√ßo do ECS
        Type: String
    VPCID:
        Description: Identificador do VPCID
        Type: String
    ExecutionRole:
        Description: Execution Role ARN; Neste exemplo estaremos usando a criada no ElasticContainerServiceTaskRole1Resource.json. Aqui configuramos o ARN da role que o ECS vai utilizar para inicializar a Task.
        Type: String
    Image:
        Type: String
        
   # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
   # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
   # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
   # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
   # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments    
    ContainerCpu:
        Description: How much CPU the container will use
        Type: Number
        Default: 256
        
    # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
    # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
    # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
    # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
    # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
    ContainerMemory:
        Description: How much memory the container will use
        Type: String
        Default: "0.5GB"
    

Resources:
    FargateAlbSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Security Group for Fargate ALB
            GroupName: FargateAlbSG
            VpcId: vpc-05aaa9e2c200144cb
            SecurityGroupIngress:
            - CidrIpv6: ::/0
              FromPort: 80
              ToPort: 80
              IpProtocol: TCP
              Description: 'Inbound rule for IPv6 traffic'
            - CidrIp: 0.0.0.0/0
              FromPort: 80
              ToPort: 80
              IpProtocol: TCP
              Description: 'Inbound rule for IPv4 traffic'
              
    ContainersSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: SG For Containers.
            VpcId: vpc-05aaa9e2c200144cb
            GroupName: ContainersTestSG
            SecurityGroupIngress:
            - IpProtocol: -1
              SourceSecurityGroupId: !GetAtt FargateAlbSG.GroupId
              Description: 'Inbound rule for all traffic'

    LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub "/ecs/${ServiceName}"
            RetentionInDays: 14

    TaskRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: EcsTaskRole2
          AssumeRolePolicyDocument:
            Statement:
              - Effect: Allow
                Principal:
                  Service: ecs-tasks.amazonaws.com
                Action: 'sts:AssumeRole'
          # ManagedPolicyArns:
          #   -
          # Policies:
          #   -

            
    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        DependsOn: LogGroup
        Properties:
            RequiresCompatibilities:
                - FARGATE
            Cpu: !Ref ContainerCpu
            Memory: !Ref ContainerMemory
            ExecutionRoleArn: !Ref ExecutionRole
            TaskRoleArn: !Ref TaskRole
            NetworkMode: "awsvpc"
            ContainerDefinitions:
                - Name: "ContainerTestName"
                  Image: !Ref Image
                  PortMappings:
                    - ContainerPort: 8080
                  MemoryReservation: 256
           
    MyFargateTargetGroup:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            Name: MyFargateTargetGroup
            VpcId: vpc-05aaa9e2c200144cb
            Protocol: HTTP
            Port: 8080
            HealthCheckPath: /actuator/
            TargetType: ip
           
    ECSCluster:
        Type: 'AWS::ECS::Cluster'
        Properties:
            ClusterName: MyFargateCluster
            
    MyECSService:
        Type: 'AWS::ECS::Service'
        Properties:
            LaunchType: FARGATE
            Cluster:
                Ref: "ECSCluster"
            DesiredCount: 2
            TaskDefinition:
                Ref: "TaskDefinition"
            DeploymentConfiguration:
                MaximumPercent: 100
                MinimumHealthyPercent: 0
            NetworkConfiguration:
                AwsvpcConfiguration:
                  AssignPublicIp: ENABLED
                  SecurityGroups:
                    - !GetAtt ContainersSG.GroupId
                  Subnets: ['subnet-0d617157308097a12','subnet-0ba24a91d096c519d']
            LoadBalancers:
              - TargetGroupArn:
                  Ref: MyFargateTargetGroup
                ContainerPort: 8080
                ContainerName: ContainerTestName
            
            
    FargateAlb:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
            Name: FargateAlb
            Subnets:
                - subnet-0d617157308097a12
                - subnet-0ba24a91d096c519d
            Type: application
            SecurityGroups:
                - !GetAtt FargateAlbSG.GroupId
            

            
    Listener:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - TargetGroupArn: !Ref MyFargateTargetGroup
                  Type: forward
            LoadBalancerArn: !Ref FargateAlb
            Port: 80
            Protocol: HTTP
            
